import streamlit as st
import os
import sys
import logging
import io
import time
import tempfile
import shutil
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List, Optional, Tuple
import pandas as pd
from openpyxl.utils import get_column_letter
from openpyxl import load_workbook
from PIL import Image as PILImage
import json

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –≤–º–µ—Å—Ç–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö
from utils import config_manager
from utils import excel_utils
from utils import image_utils
from utils.config_manager import get_downloads_folder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'logs')
os.makedirs(log_dir, exist_ok=True)

# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ –¥–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
log_files = sorted([f for f in os.listdir(log_dir) if f.startswith('app_')])
if len(log_files) > 5:
    for old_log in log_files[:-5]:
        try:
            os.remove(os.path.join(log_dir, old_log))
        except:
            pass

# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª–æ–≥-—Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
log_file = os.path.join(log_dir, 'app_latest.log')
# –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–æ–≥-—Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
try:
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    with open(log_file, 'w', encoding='utf-8') as f:
        f.write(f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")} - INFO - app - New log file created with UTF-8 encoding\n')
except Exception as e:
    print(f"Error creating log file: {e}")

log_stream = io.StringIO()
log_handler = logging.StreamHandler(log_stream)
log_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s'))
log_handler.setLevel(logging.INFO)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω —Ñ–∞–π–ª –ª–æ–≥–∞ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
file_handler = logging.FileHandler(log_file, encoding='utf-8')
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s'))
file_handler.setLevel(logging.DEBUG)

root_logger = logging.getLogger()
root_logger.setLevel(logging.DEBUG)
# –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
for handler in root_logger.handlers[:]:
    root_logger.removeHandler(handler)
root_logger.addHandler(log_handler)
root_logger.addHandler(file_handler)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import sys
sys.stdout.reconfigure(encoding='utf-8')
sys.stderr.reconfigure(encoding='utf-8')

log = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
default_settings = {
    "paths": {
        "output_folder_path": get_downloads_folder(),
        "images_folder_path": os.path.join(get_downloads_folder(), "images")
    },
    "excel_settings": {
        "article_column": "A",
        "image_column": "B",
        "start_row": 1,
        "adjust_cell_size": False,
        "column_width": 150,
        "row_height": 120
    },
    "image_settings": {
        "max_file_size_mb": 20
    },
    "check_images_on_startup": False
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
def init_config_manager(config_folder):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç.
    
    Args:
        config_folder (str): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    os.makedirs(config_folder, exist_ok=True)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_settings_path = os.path.join(config_folder, 'default_settings.json')
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if not os.path.exists(default_settings_path):
        try:
            with open(default_settings_path, 'w', encoding='utf-8') as f:
                json.dump(default_settings, f, ensure_ascii=False, indent=4)
            log.info(f"Created default settings file: {default_settings_path}")
        except Exception as e:
            log.error(f"Error creating default settings file: {str(e)}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_manager.init_config_manager(config_folder)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç
    if not config_manager.get_config_manager().current_settings:
        config_manager.get_config_manager().current_settings = default_settings
        log.info("Applied default settings")

# –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
config_folder = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'settings_presets')
init_config_manager(config_folder)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.set_page_config(
    page_title="Excel Image Processor",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
def ensure_temp_dir(prefix: str = "") -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
    
    Args:
        prefix (str): –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∏–º–µ–Ω–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    
    Returns:
        –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    """
    temp_dir = os.path.join(tempfile.gettempdir(), f"{prefix}excelwithimages")
    os.makedirs(temp_dir, exist_ok=True)
    return temp_dir

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
def cleanup_temp_files():
    """
    –û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –≤ session_state (–µ—Å–ª–∏ –µ—Å—Ç—å).
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        current_temp_file = st.session_state.get('temp_file_path', None)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        temp_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'temp')
        if not os.path.exists(temp_dir):
            return
            
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
        for filename in os.listdir(temp_dir):
            file_path = os.path.join(temp_dir, filename)
            if os.path.isfile(file_path) and file_path != current_temp_file:
                try:
                    os.remove(file_path)
                    log.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
                except Exception as e:
                    log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                    
        log.info("–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

# –í—ã–∑—ã–≤–∞–µ–º –æ—á–∏—Å—Ç–∫—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
cleanup_temp_files()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤ —Å–∞–π–¥–±–∞—Ä–µ
def update_sidebar_buttons():
    # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ - –¥–µ–ª–∞–µ–º –µ—ë –∫—Ä–∞—Å–Ω–æ–π
    st.sidebar.markdown("""
    <style>
    div[data-testid="stButton"] button[kind="secondary"] {
        background-color: #FF5555;
        color: white;
    }
    </style>
    """, unsafe_allow_html=True)
    
    if st.sidebar.button(
        '–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 
        key='reset_button', 
        help="–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
        type="secondary"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º secondary –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è
    ):
        config_manager.reset_settings()
        st.session_state['current_settings'] = config_manager.get_config_manager().current_settings
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        config_manager.set_setting("paths.output_folder_path", get_downloads_folder())
        config_manager.set_setting("paths.images_folder_path", os.path.join(get_downloads_folder(), "images"))
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫
        config_manager.set_setting("excel_settings.article_column", "A")
        config_manager.set_setting("excel_settings.image_column", "B")
        
        # –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ st.rerun() —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
        st.session_state['needs_rerun'] = True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
def show_settings():
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    # st.sidebar.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–µ–π –≤ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
    with st.sidebar.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–µ–π", expanded=True):
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∑–∞–≥—Ä—É–∑–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        default_downloads = get_downloads_folder()
        
        # –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞
        output_folder = st.sidebar.text_input(
            "–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
            value=config_manager.get_setting("paths.output_folder_path", default_downloads),
            help="–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≥–¥–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª Excel",
            key="output_folder_input"
        )
        
        if output_folder:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞
            if not os.path.exists(output_folder):
                st.sidebar.warning(f"–ü–∞–ø–∫–∞ {output_folder} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–Ω–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")
            else:
                st.sidebar.success(f"–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {output_folder}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            config_manager.set_setting("paths.output_folder_path", output_folder)
        
        # –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        images_folder = st.sidebar.text_input(
            "–ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏",
            value=config_manager.get_setting("paths.images_folder_path", ""),
            help="–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏",
            key="images_folder_input"
        )
        
        if images_folder:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞
            if not os.path.exists(images_folder):
                st.sidebar.warning(f"–ü–∞–ø–∫–∞ {images_folder} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            else:
                st.sidebar.success(f"–ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {images_folder}")
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ
                image_files = [f for f in os.listdir(images_folder) 
                              if os.path.isfile(os.path.join(images_folder, f)) and 
                              f.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp'))]
                st.sidebar.info(f"–ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            config_manager.set_setting("paths.images_folder_path", images_folder)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    with st.sidebar.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", expanded=True):
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        max_file_size_mb = st.sidebar.number_input(
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–ú–ë)",
            min_value=1,
            max_value=50,
            value=config_manager.get_setting("image_settings.max_file_size_mb", 20),
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö",
            key="max_file_size_input",
            label_visibility="visible"
        )
        config_manager.set_setting("image_settings.max_file_size_mb", int(max_file_size_mb))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —è—á–µ–π–∫–∏
        adjust_cell_size = st.sidebar.checkbox(
            "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏",
            value=config_manager.get_setting("excel_settings.adjust_cell_size", False),
            help="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —Ä–∞–∑–º–µ—Ä—ã —è—á–µ–µ–∫ –±—É–¥—É—Ç –∏–∑–º–µ–Ω–µ–Ω—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            key="adjust_cell_size_input",
            label_visibility="visible"
        )
        config_manager.set_setting("excel_settings.adjust_cell_size", adjust_cell_size)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —è—á–µ–π–∫–∏
        if adjust_cell_size:
            col1, col2 = st.sidebar.columns(2)
            
            # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–∫–∏
            column_width = col1.number_input(
                "–®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ (–ø–∏–∫—Å.)",
                min_value=50,
                max_value=500,
                value=config_manager.get_setting("excel_settings.column_width", 150),
                help="–ñ–µ–ª–∞–µ–º–∞—è —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
                key="column_width_input",
                label_visibility="visible"
            )
            config_manager.set_setting("excel_settings.column_width", int(column_width))
            
            # –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏
            row_height = col2.number_input(
                "–í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ (–ø–∏–∫—Å.)",
                min_value=30,
                max_value=500,
                value=config_manager.get_setting("excel_settings.row_height", 120),
                help="–ñ–µ–ª–∞–µ–º–∞—è –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
                key="row_height_input",
                label_visibility="visible"
            )
            config_manager.set_setting("excel_settings.row_height", int(row_height))
            
        # –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        start_row = st.sidebar.number_input(
            "–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞",
            min_value=1,
            value=config_manager.get_setting("excel_settings.start_row", 1),
            help="–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–Ω–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏)",
            key="start_row_input",
            label_visibility="visible"
        )
        config_manager.set_setting("excel_settings.start_row", int(start_row))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
def show_table_preview(df):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã.
    
    Args:
        df (pd.DataFrame): DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    with st.expander("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞", expanded=True):
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        st.write(f"**–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫:** {len(df)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–µ
        column_stats = {}
        for col in df.columns:
            if col not in ['image', 'image_path', 'image_width', 'image_height']:
                non_empty_count = df[col].notna().sum()
                column_stats[col] = non_empty_count
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
        st.write("**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö:**")
        stats_df = pd.DataFrame({
            '–ö–æ–ª–æ–Ω–∫–∞': column_stats.keys(),
            '–ù–µ–ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π': column_stats.values()
        })
        st.dataframe(stats_df, use_container_width=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        st.write("**–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:**")
        st.dataframe(df.head(), use_container_width=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ Excel
def file_uploader_section():
    """
    –†–∞–∑–¥–µ–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –ª–∏—Å—Ç–∞
    if st.session_state.get('force_rerun', False):
        st.session_state.force_rerun = False
        
    # CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    st.markdown("""
    <style>
    /* –£–¥–∞–ª—è–µ–º –∫—Ä–∞—Å–Ω—É—é —Ä–∞–º–∫—É –≤–æ–∫—Ä—É–≥ file uploader */
    .stFileUploader {
        border: none !important;
    }
    
    /* –ë–æ–ª—å—à–∞—è –∑–µ–ª–µ–Ω–∞—è –∫–Ω–æ–ø–∫–∞ */
    .big-green-button {
        background-color: #4CAF50;
        color: white;
        padding: 15px 25px;
        font-size: 18px;
        font-weight: bold;
        border-radius: 8px;
        border: none;
        cursor: pointer;
        width: 100%;
        text-align: center;
        margin: 20px 0;
        transition: all 0.3s;
    }
    
    .big-green-button:hover {
        background-color: #3e8e41;
    }
    
    /* –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ */
    .inactive-button {
        background-color: white;
        color: #4CAF50;
        padding: 12px 20px;
        font-size: 16px;
        border-radius: 5px;
        border: 2px solid #4CAF50;
        cursor: not-allowed;
        width: 100%;
        text-align: center;
        margin: 10px 0;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö session_state –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    # –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º uploaded_file, —Ç–∞–∫ –∫–∞–∫ Streamlit —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º —Å–∞–º
    if 'df' not in st.session_state:
        st.session_state.df = None
    if 'temp_file_path' not in st.session_state:
        st.session_state.temp_file_path = None
    if 'processing_result' not in st.session_state:
        st.session_state.processing_result = None
    if 'processing_error' not in st.session_state:
        st.session_state.processing_error = None
    if 'is_processing' not in st.session_state:
        st.session_state.is_processing = False
    if 'output_file_path' not in st.session_state:
        st.session_state.output_file_path = None
    if 'selected_sheet' not in st.session_state:
        st.session_state.selected_sheet = None
    if 'available_sheets' not in st.session_state:
        st.session_state.available_sheets = []
    
    def load_excel_file():
        """–ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ DataFrame"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º uploaded_file –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –∞ –Ω–µ –∏–∑ session_state
        uploaded_file = st.session_state.uploaded_file
        if uploaded_file is not None:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            temp_dir = os.path.join(os.getcwd(), "temp")
            os.makedirs(temp_dir, exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            file_extension = os.path.splitext(uploaded_file.name)[1]
            temp_file_path = os.path.join(temp_dir, f"temp_file_{int(time.time())}{file_extension}")
            
            with open(temp_file_path, "wb") as f:
                f.write(uploaded_file.getbuffer())
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤ –≤ Excel —Ñ–∞–π–ª–µ
            try:
                excel = pd.ExcelFile(temp_file_path)
                st.session_state.available_sheets = excel.sheet_names
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ª–∏—Å—Ç, –≤—ã–±–∏—Ä–∞–µ–º –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                if len(st.session_state.available_sheets) == 1:
                    st.session_state.selected_sheet = st.session_state.available_sheets[0]
                else:
                    # –ï—Å–ª–∏ –ª–∏—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –≤—ã–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
                    if 'selected_sheet' not in st.session_state or not st.session_state.selected_sheet:
                        st.session_state.selected_sheet = st.session_state.available_sheets[0]
                
                # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ª–∏—Å—Ç–æ–º
                df = pd.read_excel(temp_file_path, sheet_name=st.session_state.selected_sheet)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–º–µ–Ω–∞ –∏ –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ –±—É–∫–≤–∞–º (A, B, C, ...)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –∫ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ç–∏–ø—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è str.contains
                renamed_columns = False
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å
                unnamed_cols = []
                for i, col in enumerate(df.columns):
                    col_str = str(col)
                    if 'Unnamed:' in col_str or pd.isna(col):
                        unnamed_cols.append(i)
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–æ–ª–±—Ü—ã –±–µ–∑ –∏–º–µ–Ω, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∏—Ö
                if unnamed_cols:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤
                    new_columns = list(df.columns)
                    for i in unnamed_cols:
                        new_columns[i] = get_column_letter(i+1)  # A, B, C, ...
                    
                    df.columns = new_columns
                    renamed_columns = True
                    log.info(f"Renamed columns without headers: {[get_column_letter(i+1) for i in unnamed_cols]}")
                
                st.session_state.df = df
                st.session_state.temp_file_path = temp_file_path
                st.session_state.processing_error = None
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                if 'article_column' in st.session_state:
                    del st.session_state.article_column
                if 'image_column' in st.session_state:
                    del st.session_state.image_column
                
                log.info(f"File {uploaded_file.name} loaded successfully. Sheets found: {len(st.session_state.available_sheets)}")
                return True
            except Exception as e:
                st.session_state.processing_error = f"Error reading file: {str(e)}"
                log.error(f"Error reading file: {str(e)}")
                return False
        return False
    
    def select_sheet():
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ª–∏—Å—Ç–∞ Excel"""
        if st.session_state.temp_file_path and st.session_state.selected_sheet:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–æ–¥, —á—Ç–æ –∏ –≤ load_excel_file, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã
                df = pd.read_excel(st.session_state.temp_file_path, sheet_name=st.session_state.selected_sheet)
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –∫ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ç–∏–ø—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è str.contains
                renamed_columns = False
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å
                unnamed_cols = []
                for i, col in enumerate(df.columns):
                    col_str = str(col)
                    if 'Unnamed:' in col_str or pd.isna(col):
                        unnamed_cols.append(i)
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–æ–ª–±—Ü—ã –±–µ–∑ –∏–º–µ–Ω, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∏—Ö
                if unnamed_cols:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤
                    new_columns = list(df.columns)
                    for i in unnamed_cols:
                        new_columns[i] = get_column_letter(i+1)  # A, B, C, ...
                    
                    df.columns = new_columns
                    renamed_columns = True
                    log.info(f"Renamed columns without headers: {[get_column_letter(i+1) for i in unnamed_cols]}")
                
                st.session_state.df = df
                
                # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –ª–∏—Å—Ç–∞
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∫ –µ—Å—Ç—å
                
                log.info(f"Selected sheet: {st.session_state.selected_sheet}")
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ–º rerun –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                st.session_state.force_rerun = True
                st.session_state.needs_rerun = True
            except Exception as e:
                st.session_state.processing_error = f"Error reading sheet: {str(e)}"
                log.error(f"Error reading sheet: {str(e)}")
    
    def all_inputs_valid():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DataFrame
        if st.session_state.df is None:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        if 'article_column_letter' not in st.session_state or not st.session_state.article_column_letter:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        image_folder = config_manager.get_setting("paths.images_folder_path", "")
        if image_folder == "" or not os.path.exists(image_folder):
            return False
            
        return True
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ - –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º uploaded_file —á–µ—Ä–µ–∑ session_state
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª", type=["xlsx", "xls"], key="uploaded_file", on_change=load_excel_file)
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ª–∏—Å—Ç–∞
    if uploaded_file is not None and st.session_state.available_sheets:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
        st.success(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
        
        # –í—ã–±–æ—Ä –ª–∏—Å—Ç–∞ (–µ—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏—Å—Ç–æ–≤)
        if len(st.session_state.available_sheets) > 1:
            st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç Excel",
                options=st.session_state.available_sheets,
                key="selected_sheet",
                on_change=select_sheet
            )
        else:
            st.info(f"–í—ã–±—Ä–∞–Ω –ª–∏—Å—Ç: {st.session_state.selected_sheet}")
    
    # –ï—Å–ª–∏ DataFrame –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if st.session_state.df is not None:
        df = st.session_state.df
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
        st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(df)} | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏
            st.text_input(
                "–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É –∫–æ–ª–æ–Ω–∫–∏ —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ (A, B, C, ...)", 
                value="A",
                key="article_column_letter", 
                help="–£–∫–∞–∂–∏—Ç–µ –±—É–∫–≤—É –∫–æ–ª–æ–Ω–∫–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∞—Ä—Ç–∏–∫—É–ª—ã"
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ –≤ session_state
            if 'article_column_letter' in st.session_state and st.session_state.article_column_letter:
                col_idx = excel_utils.column_letter_to_index(st.session_state.article_column_letter)
                if col_idx < len(df.columns):
                    st.session_state.article_column = df.columns[col_idx]
        
        with col2:
            # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            st.text_input(
                "–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", 
                value="B",
                key="image_column_letter",
                help="–£–∫–∞–∂–∏—Ç–µ –±—É–∫–≤—É –∫–æ–ª–æ–Ω–∫–∏, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥—É—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ –≤ session_state
            if 'image_column_letter' in st.session_state and st.session_state.image_column_letter:
                col_idx = excel_utils.column_letter_to_index(st.session_state.image_column_letter)
                if col_idx < len(df.columns):
                    st.session_state.image_column = df.columns[col_idx]
            else:
                st.session_state.image_column = ""
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≤–∫–ª—é—á–∞—è –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        with st.expander("–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏", expanded=True):
            st.write("**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö:**")
            st.write(f"- –í—ã–±—Ä–∞–Ω–Ω—ã–π –ª–∏—Å—Ç: **{st.session_state.selected_sheet}**")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±—É–∫–≤–µ–Ω–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
            article_column_letter = st.session_state.get('article_column_letter', 'A')
            image_column_letter = st.session_state.get('image_column_letter', 'B')
            
            st.write(f"- –ö–æ–ª–æ–Ω–∫–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏: **{article_column_letter}**")
            st.write(f"- –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: **{image_column_letter}**")
            
            st.write("**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–µ–π:**")
            images_folder = config_manager.get_setting("paths.images_folder_path", "")
            output_folder = config_manager.get_setting("paths.output_folder_path", "")
            
            if images_folder and os.path.exists(images_folder):
                st.write(f"- –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: **{images_folder}** ‚úÖ")
            else:
                st.write("- –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: **–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç** ‚ùå")
            
            if output_folder:
                if not os.path.exists(output_folder):
                    st.write(f"- –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: **{output_folder}** ‚ö†Ô∏è (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞)")
                else:
                    st.write(f"- –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: **{output_folder}** ‚úÖ")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
        show_table_preview(df)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
        st.subheader("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏
        button_enabled = all_inputs_valid()
        
        if not button_enabled:
            # –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Å–∫–∞–∑–∫—É, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏
            missing = []
            if st.session_state.df is None:
                missing.append("- –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª")
            if 'article_column_letter' not in st.session_state or not st.session_state.article_column_letter:
                missing.append("- –í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É –∫–æ–ª–æ–Ω–∫–∏ —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏")
            if not config_manager.get_setting("paths.images_folder_path", "") or not os.path.exists(config_manager.get_setting("paths.images_folder_path", "")):
                missing.append("- –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            
            if missing:
                st.warning("–î–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n" + "\n".join(missing))
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∫–ª–∞—Å—Å–æ–º
        start_processing = st.button(
            "–ó–ê–ü–£–°–¢–ò–¢–¨ –û–ë–†–ê–ë–û–¢–ö–£ –§–ê–ô–õ–ê", 
            disabled=not button_enabled or st.session_state.is_processing,
            key="start_processing_button", 
            use_container_width=True,
            type="primary" if button_enabled else "secondary"
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
        if st.session_state.processing_error:
            st.error(st.session_state.processing_error)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if st.session_state.processing_result:
            st.success(st.session_state.processing_result)
            
            if st.session_state.output_file_path and os.path.exists(st.session_state.output_file_path):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞
                try:
                    with open(st.session_state.output_file_path, "rb") as f:
                        file_data = f.read()
                    
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª",
                        data=file_data,
                        file_name=os.path.basename(st.session_state.output_file_path),
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        use_container_width=True
                    )
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {str(e)}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
        if start_processing and not st.session_state.is_processing:
            st.session_state.is_processing = True
            st.session_state.processing_result = None
            st.session_state.processing_error = None
            
            try:
                # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
                import sys
                current_dir = os.path.dirname(os.path.abspath(__file__))
                parent_dir = os.path.dirname(current_dir)
                if parent_dir not in sys.path:
                    sys.path.append(parent_dir)
                
                from core.processor import process_excel_file
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ DataFrame
                article_column = st.session_state.article_column_letter
                image_column = st.session_state.image_column_letter
                
                output_file = process_excel_file(
                    excel_file_path=st.session_state.temp_file_path,
                    article_column=article_column,
                    image_column=image_column,
                    image_folder=config_manager.get_setting("paths.images_folder_path", ""),
                    sheet_name=st.session_state.selected_sheet
                )
                
                st.session_state.output_file_path = output_file
                st.session_state.processing_result = f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {output_file}"
                log.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"
                st.session_state.processing_error = error_msg
                log.error(error_msg)
            finally:
                st.session_state.is_processing = False
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                st.session_state.needs_rerun = True
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–∫–Ω–æ –ª–æ–≥–æ–≤
    with st.expander("Logs", expanded=False):
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥-—Ñ–∞–π–ª–∞
        try:
            if os.path.exists(log_file):
                with open(log_file, 'r', encoding='utf-8') as f:
                    logs = f.readlines()
                    # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤
                    log_text = "".join(logs[-50:])
                    st.code(log_text, language="text")
            else:
                st.warning("Log file not found")
        except Exception as e:
            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤ –¥–≤–æ–∏—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫
            try:
                with open(log_file, 'rb') as f:
                    binary_logs = f.read()
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫
                    log_text = binary_logs.decode('utf-8', errors='replace')
                    st.code(log_text[-5000:], language="text")
                    st.warning("Log file is displayed with replacement characters for characters that could not be decoded")
            except Exception as e2:
                st.error(f"Error reading log file: {str(e2)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ (–≤—Å–µ –ª–∏ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã)
def is_ready_for_processing():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    input_file = config_manager.get_setting("paths.input_file_path", "")
    output_folder = config_manager.get_setting("paths.output_folder_path", "")
    images_folder = config_manager.get_setting("paths.images_folder_path", "")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —Ñ–∞–π–ª
    if not input_file or not os.path.isfile(input_file):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–∞ –ª–∏ –ø–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    if not images_folder or not os.path.isdir(images_folder):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–∞ –ª–∏ –≤—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞
    if not output_folder:
        return False
    
    return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
def process_files():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Excel —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∞—Ä—Ç–∏–∫—É–ª–∞–º.
    """
    try:
        log.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤")
        st.session_state['is_processing'] = True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not all([
            st.session_state.get('df') is not None,
            st.session_state.get('excel_file_path'),
            st.session_state.get('article_column'),
            st.session_state.get('image_column'),
            st.session_state.get('image_folder_path')
        ]):
            raise ValueError("–ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
        df = st.session_state['df'].copy()
        excel_file_path = st.session_state['excel_file_path']
        article_column = st.session_state['article_column']
        image_column = st.session_state['image_column']
        image_folder_path = st.session_state['image_folder_path']
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        temp_dir = ensure_temp_dir(prefix="excel_images_")
        log.info(f"–°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {temp_dir}")
        
        # –ü—É—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–º—É —Ñ–∞–π–ª—É
        result_filename = f"processed_{os.path.basename(excel_file_path)}"
        result_file_path = os.path.join(temp_dir, result_filename)
        
        # –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π –∫–æ –≤—Å–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        processed_image_paths = []
        total_rows = len(df)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ DataFrame
        for idx, row in df.iterrows():
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress = (idx + 1) / total_rows
            log.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ {idx+1}/{total_rows} ({progress:.1%})")
            
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞
                article = row[article_column]
                if pd.isna(article):
                    log.warning(f"–°—Ç—Ä–æ–∫–∞ {idx+1}: –∞—Ä—Ç–∏–∫—É–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                    
                normalized_article = image_utils.normalize_article_number(str(article))
                
                # –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞
                image_paths = image_utils.find_images_by_article(image_folder_path, normalized_article)
                
                if not image_paths:
                    log.warning(f"–î–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {article} (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: {normalized_article}) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    continue
                    
                log.info(f"–î–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {article} –Ω–∞–π–¥–µ–Ω–æ {len(image_paths)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                
                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è Excel
                processed_images = []
                for img_path in image_paths:
                    try:
                        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        img_filename = f"{normalized_article}_{len(processed_images)}_{os.path.basename(img_path)}"
                        processed_img_path = os.path.join(temp_dir, img_filename)
                        
                        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        image_utils.optimize_image_for_excel(img_path, processed_img_path)
                        processed_images.append(processed_img_path)
                        processed_image_paths.append(processed_img_path)
                        
                        log.debug(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {img_path} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {processed_img_path}")
                    except Exception as img_err:
                        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img_path}: {img_err}")
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ DataFrame —Å –ø—É—Ç—è–º–∏ –∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
                if processed_images:
                    df.at[idx, image_column] = ",".join(processed_images)
            except Exception as row_err:
                log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {idx+1}: {row_err}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ DataFrame –≤ –Ω–æ–≤—ã–π Excel —Ñ–∞–π–ª
        log.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª: {result_file_path}")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ExcelWriter –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            with pd.ExcelWriter(result_file_path, engine='openpyxl') as writer:
                df.to_excel(writer, index=False)
                
                # –í—Å—Ç–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ñ–∞–π–ª Excel
                excel_utils.insert_images_to_excel(writer, df, image_column)
                
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if os.path.exists(result_file_path):
                log.info(f"–§–∞–π–ª {result_file_path} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                st.session_state['result_file_path'] = result_file_path
                st.session_state['process_complete'] = True
            else:
                raise FileNotFoundError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª {result_file_path}")
                
        except Exception as excel_err:
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {excel_err}")
            raise
            
        log.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {e}")
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {str(e)}")
        return False
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        st.session_state['is_processing'] = False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
def show_results(stats: Dict[str, Any]):
    if not stats:
        return
    
    st.success("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    col1, col2, col3 = st.columns(3)
    col1.metric("–í—Å–µ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤", stats["total_articles"])
    col2.metric("–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", stats["images_found"])
    col3.metric("–í—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ Excel", stats["images_inserted"])
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
    st.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {stats['output_file']}")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    if st.button(
        "–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º", 
        key="open_result_folder_button", 
        help="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª Excel"
    ):
        output_folder = os.path.dirname(stats["output_file"])
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
        if os.name == 'nt':  # Windows
            os.startfile(output_folder)
        elif os.name == 'posix':  # macOS –∏ Linux
            os.system(f"open {output_folder}")  # macOS
            # os.system(f"xdg-open {output_folder}")  # Linux

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
def initialize_session_state():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.
    """
    # –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º uploaded_file, —Ç–∞–∫ –∫–∞–∫ Streamlit —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º —Å–∞–º
    if 'df' not in st.session_state:
        st.session_state.df = None
    if 'temp_file_path' not in st.session_state:
        st.session_state.temp_file_path = None
    if 'processing_result' not in st.session_state:
        st.session_state.processing_result = None
    if 'processing_error' not in st.session_state:
        st.session_state.processing_error = None
    if 'is_processing' not in st.session_state:
        st.session_state.is_processing = False
    if 'output_file_path' not in st.session_state:
        st.session_state.output_file_path = None
    if 'current_settings' not in st.session_state:
        st.session_state.current_settings = config_manager.get_config_manager().current_settings
    if 'selected_sheet' not in st.session_state:
        st.session_state.selected_sheet = None
    if 'available_sheets' not in st.session_state:
        st.session_state.available_sheets = []
    if 'force_rerun' not in st.session_state:
        st.session_state.force_rerun = False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
def settings_tab():
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.
    """
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    show_settings()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    update_sidebar_buttons()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ
def check_new_images_in_folder():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ.
    """
    images_folder = config_manager.get_setting("paths.images_folder_path", "")
    if not images_folder or not os.path.exists(images_folder):
        return
    
    st.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ: {images_folder}")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è/—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session_state
    initialize_session_state()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if st.session_state.get('needs_rerun', False):
        st.session_state['needs_rerun'] = False
        st.rerun()
    
    # –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –∏ —Ñ—É—Ç–µ—Ä–∞
    st.markdown("""
    <style>
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    .main .block-container {padding-top: 0.5rem;}
    </style>
    """, unsafe_allow_html=True)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings_tab()
    
    # –ì–ª–∞–≤–Ω—ã–π —Ä–∞–∑–¥–µ–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    file_uploader_section()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
    settings = config_manager.get_config_manager().current_settings
    if settings and settings.get("check_images_on_startup", False):
        check_new_images_in_folder()

if __name__ == "__main__":
    main() 